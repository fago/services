<?php
// $Id: entity_resources.module,v 1.1.2.1 2009/09/05 13:57:58 marcingy Exp $

/**
 * Implements hook_services_resources().
 */
function entity_resources_services_resources() {
  $resources = array();
  foreach (entity_get_info() as $entity_type => $info) {
    // We instantiate a CRUD object, which we use for callbacks. The object
    // stores the entity type needed by the callbacks.
    $crud_object = new EntityResourceServicesCRUD($entity_type);
    
    // Integrate all entities for which we have view access metadata.
    if ($crud_object->access('view') !== NULL) {
      $resources[$entity_type]['retrieve'] = array(
        'callback' => array($crud_object, 'retrieve'),
        'args' => array(
          array(
            'name' => 'id',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'int',
            'description' => 'The id of the entity to get',
          ),
        ),
        'models' => array(
          'ResourceFeedModel' => array(
            'class' => 'EntityResourceFeedModel',
            'arguments' => array('entity type' => $entity_type, 'source' => 'single'),
          ),
        ),
        'access callback' => array($crud_object, 'access'),
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
      );
    }
    
    // Integrate all entities for which we have creation and save callbacks.
    if ($crud_object->access('create') !== NULL && isset($info['creation callback']) && isset($info['save callback'])) {
      $resources[$entity_type]['create'] = array(
        'callback' => array($crud_object, 'create'),
        'args' => array(
          array(
            'name' => 'values',
            'optional' => FALSE,
            'source' => 'data',
            'description' => 'The entity to create',
            'type' => 'struct',
          ),
        ),
        'models' => array(
          'ResourceFeedModel' => array(
            'class' => 'EntityResourceFeedModel',
            'arguments' => array('entity type' => $entity_type, 'source' => 'single'),
          ),
        ),
        'access callback' => array($crud_object, 'access'),
        'access arguments' => array('create'),
        'access arguments append' => TRUE,
      );
    }

    // Integrate all entities for which we have a save callback.
    if ($crud_object->access('update') !== NULL && isset($info['save callback'])) {
      $resources[$entity_type]['update'] = array(
        'callback' => array($crud_object, 'update'),
        'args' => array(
          array(
            'name' => $entity_type,
            'optional' => FALSE,
            'source' => 'data',
            'description' => 'The entity data to update',
            'type' => 'struct',
          ),
        ),
        'models' => array(
          'ResourceFeedModel' => array(
            'class' => 'EntityResourceFeedModel',
            'arguments' => array('entity type' => $entity_type, 'source' => 'single'),
          ),
        ),
        'access callback' => array($crud_object, 'access'),
        'access arguments' => array('update'),
        'access arguments append' => TRUE,
      );
    }
    
    // Integrate all entities for which we have a deletion callback.
    if ($crud_object->access('delete') !== NULL && isset($info['deletion callback'])) {
      $resources[$entity_type]['delete'] = array(
        'callback' => array($crud_object, 'delete'),
        'args' => array(
          array(
            'name' => 'id',
            'optional' => FALSE,
            'source' => array('path' => 0),
          ),
        ),
        'models' => array(
          'ResourceFeedModel' => array(
            'class' => 'EntityResourceFeedModel',
            'arguments' => array('entity type' => $entity_type, 'source' => 'single'),
          ),
        ),
        'access callback' => array($crud_object, 'access'),
        'access arguments' => array('delete'),
        'access arguments append' => TRUE,
      );
    }
  }
  return $resources;
}
